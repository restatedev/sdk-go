// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	restatecontext "github.com/restatedev/sdk-go/internal/restatecontext"
	mock "github.com/stretchr/testify/mock"
)

// MockSelector is an autogenerated mock type for the Selector type
type MockSelector struct {
	mock.Mock
}

type MockSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelector) EXPECT() *MockSelector_Expecter {
	return &MockSelector_Expecter{mock: &_m.Mock}
}

// Remaining provides a mock function with no fields
func (_m *MockSelector) Remaining() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Remaining")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSelector_Remaining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remaining'
type MockSelector_Remaining_Call struct {
	*mock.Call
}

// Remaining is a helper method to define mock.On call
func (_e *MockSelector_Expecter) Remaining() *MockSelector_Remaining_Call {
	return &MockSelector_Remaining_Call{Call: _e.mock.On("Remaining")}
}

func (_c *MockSelector_Remaining_Call) Run(run func()) *MockSelector_Remaining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSelector_Remaining_Call) Return(_a0 bool) *MockSelector_Remaining_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSelector_Remaining_Call) RunAndReturn(run func() bool) *MockSelector_Remaining_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with no fields
func (_m *MockSelector) Select() restatecontext.Selectable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 restatecontext.Selectable
	if rf, ok := ret.Get(0).(func() restatecontext.Selectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(restatecontext.Selectable)
		}
	}

	return r0
}

// MockSelector_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockSelector_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
func (_e *MockSelector_Expecter) Select() *MockSelector_Select_Call {
	return &MockSelector_Select_Call{Call: _e.mock.On("Select")}
}

func (_c *MockSelector_Select_Call) Run(run func()) *MockSelector_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSelector_Select_Call) Return(_a0 restatecontext.Selectable) *MockSelector_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSelector_Select_Call) RunAndReturn(run func() restatecontext.Selectable) *MockSelector_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelector creates a new instance of MockSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelector {
	mock := &MockSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
