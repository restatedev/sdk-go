// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	restatecontext "github.com/restatedev/sdk-go/internal/restatecontext"
	mock "github.com/stretchr/testify/mock"
)

// MockWaitIterator is an autogenerated mock type for the WaitIterator type
type MockWaitIterator struct {
	mock.Mock
}

type MockWaitIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWaitIterator) EXPECT() *MockWaitIterator_Expecter {
	return &MockWaitIterator_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with no fields
func (_m *MockWaitIterator) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWaitIterator_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockWaitIterator_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockWaitIterator_Expecter) Err() *MockWaitIterator_Err_Call {
	return &MockWaitIterator_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockWaitIterator_Err_Call) Run(run func()) *MockWaitIterator_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaitIterator_Err_Call) Return(_a0 error) *MockWaitIterator_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWaitIterator_Err_Call) RunAndReturn(run func() error) *MockWaitIterator_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockWaitIterator) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockWaitIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWaitIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockWaitIterator_Expecter) Next() *MockWaitIterator_Next_Call {
	return &MockWaitIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockWaitIterator_Next_Call) Run(run func()) *MockWaitIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaitIterator_Next_Call) Return(_a0 bool) *MockWaitIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWaitIterator_Next_Call) RunAndReturn(run func() bool) *MockWaitIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with no fields
func (_m *MockWaitIterator) Value() restatecontext.Selectable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 restatecontext.Selectable
	if rf, ok := ret.Get(0).(func() restatecontext.Selectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(restatecontext.Selectable)
		}
	}

	return r0
}

// MockWaitIterator_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockWaitIterator_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockWaitIterator_Expecter) Value() *MockWaitIterator_Value_Call {
	return &MockWaitIterator_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockWaitIterator_Value_Call) Run(run func()) *MockWaitIterator_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaitIterator_Value_Call) Return(_a0 restatecontext.Selectable) *MockWaitIterator_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWaitIterator_Value_Call) RunAndReturn(run func() restatecontext.Selectable) *MockWaitIterator_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWaitIterator creates a new instance of MockWaitIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWaitIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWaitIterator {
	mock := &MockWaitIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
