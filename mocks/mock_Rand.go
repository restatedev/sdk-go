// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	rand "github.com/restatedev/sdk-go/internal/rand"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRand is an autogenerated mock type for the Rand type
type MockRand struct {
	mock.Mock
}

type MockRand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRand) EXPECT() *MockRand_Expecter {
	return &MockRand_Expecter{mock: &_m.Mock}
}

// Float64 provides a mock function with no fields
func (_m *MockRand) Float64() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Float64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockRand_Float64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Float64'
type MockRand_Float64_Call struct {
	*mock.Call
}

// Float64 is a helper method to define mock.On call
func (_e *MockRand_Expecter) Float64() *MockRand_Float64_Call {
	return &MockRand_Float64_Call{Call: _e.mock.On("Float64")}
}

func (_c *MockRand_Float64_Call) Run(run func()) *MockRand_Float64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Float64_Call) Return(_a0 float64) *MockRand_Float64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Float64_Call) RunAndReturn(run func() float64) *MockRand_Float64_Call {
	_c.Call.Return(run)
	return _c
}

// Source provides a mock function with no fields
func (_m *MockRand) Source() rand.Source {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 rand.Source
	if rf, ok := ret.Get(0).(func() rand.Source); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rand.Source)
		}
	}

	return r0
}

// MockRand_Source_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Source'
type MockRand_Source_Call struct {
	*mock.Call
}

// Source is a helper method to define mock.On call
func (_e *MockRand_Expecter) Source() *MockRand_Source_Call {
	return &MockRand_Source_Call{Call: _e.mock.On("Source")}
}

func (_c *MockRand_Source_Call) Run(run func()) *MockRand_Source_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Source_Call) Return(_a0 rand.Source) *MockRand_Source_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Source_Call) RunAndReturn(run func() rand.Source) *MockRand_Source_Call {
	_c.Call.Return(run)
	return _c
}

// UUID provides a mock function with no fields
func (_m *MockRand) UUID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UUID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockRand_UUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UUID'
type MockRand_UUID_Call struct {
	*mock.Call
}

// UUID is a helper method to define mock.On call
func (_e *MockRand_Expecter) UUID() *MockRand_UUID_Call {
	return &MockRand_UUID_Call{Call: _e.mock.On("UUID")}
}

func (_c *MockRand_UUID_Call) Run(run func()) *MockRand_UUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_UUID_Call) Return(_a0 uuid.UUID) *MockRand_UUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_UUID_Call) RunAndReturn(run func() uuid.UUID) *MockRand_UUID_Call {
	_c.Call.Return(run)
	return _c
}

// Uint64 provides a mock function with no fields
func (_m *MockRand) Uint64() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uint64")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockRand_Uint64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uint64'
type MockRand_Uint64_Call struct {
	*mock.Call
}

// Uint64 is a helper method to define mock.On call
func (_e *MockRand_Expecter) Uint64() *MockRand_Uint64_Call {
	return &MockRand_Uint64_Call{Call: _e.mock.On("Uint64")}
}

func (_c *MockRand_Uint64_Call) Run(run func()) *MockRand_Uint64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Uint64_Call) Return(_a0 uint64) *MockRand_Uint64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Uint64_Call) RunAndReturn(run func() uint64) *MockRand_Uint64_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRand creates a new instance of MockRand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRand {
	mock := &MockRand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
